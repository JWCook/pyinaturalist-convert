name: Build

on:
  push:
    branches: [main, pre-release]
    tags: ['v*']
  pull_request:
    branches: [main, pre-release]
  workflow_dispatch:
env:
  LATEST_PY_VERSION: '3.10'
  COVERAGE_ARGS: '--cov --cov-report=term --cov-report=html'


jobs:
  # Run unit tests for each supported python version
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1.3
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      # Cache packages per python version, and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all

      - name: Run unit tests
        run: poetry run pytest -n auto ${{ env.COVERAGE_ARGS }}

        # Latest python version: send coverage report to codecov
      - name: "Upload coverage report to Codecov"
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        uses: codecov/codecov-action@v3


  # Run code analysis checks via pre-commit hooks
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - name: Run style checks & linting
        uses: pre-commit/action@v2.0.3

  # Deploy pre-release builds from 'pre-release' branch, and stable builds on tags only
  release:
    needs: [test, analyze]
    if: startsWith(github.ref, 'refs/tags/v') || endsWith(github.ref, '/pre-release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.3
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      - name: Set pre-release version number
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: poetry version $(poetry version -s).dev${GITHUB_RUN_NUMBER}
      - name: Build and publish to pypi
        run: |
          poetry build
          poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}
